@page "/orders"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using AzureStaticWebApps.Blazor.Authentication.Models
@inject HttpClient Http
@using BlazorApp.Client.Models

@if (orders == null)
{
    <p><em>Loading...</em></p> }
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>User</th>
                <th>Full Address</th>
                <th>Distance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.User</td>
                    <td>@order.FullAddress</td>
                    <td>@order.Distance</td>
                </tr>
            }
        </tbody>
    </table>

    @*<hr>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>*@


    @code {

        private HubConnection hubConnection;

        private Order[] orders = null;

        //private List<string> messages = new List<string>();

        protected override async Task OnInitializedAsync()
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/api"), options =>
                {
                    options.HttpMessageHandlerFactory = innerHandler =>
                        new IncludeRequestCredentialsMessageHandler { InnerHandler = innerHandler };
                })
                .Build();

            hubConnection.On<string, string, string, string>("ReceiveOrderUpdate", (user, orderId, latitude, longitude) =>
            {

                //messages.Clear();

                //messages.Add($"ReceiveOrderUpdate - Start ({user},{orderId},{latitude},{longitude})");
                //var encodedMsg = $"{user}: {orderId}";

                //messages.Add($"ReceiveOrderUpdate - Orders ({orders.Length})");

                //foreach (var ord in orders)
                //{
                //    messages.Add($"ReceiveOrderUpdate - Order({ord.User}, {ord.Id})");
                //}

                var order = orders.FirstOrDefault(f => f.User == user && f.Id.ToUpperInvariant() == orderId.ToUpperInvariant());

                if (order != null)
                {
                    //messages.Add($"ReceiveOrderUpdate - Previous Last Position ({order.LastPosition.Latitude},{order.LastPosition.Longitude})");
                    order.LastPosition = new MyPoint(double.Parse(latitude), double.Parse(longitude));
                    StateHasChanged();
                }
                //else
                //{
                //    messages.Add($"ReceiveOrderUpdate - No Order");
                //}
                //messages.Add("ReceiveOrderUpdate - End");
                //StateHasChanged();

            });

            await hubConnection.StartAsync();

            try
            {
                orders = await Http.GetFromJsonAsync<Order[]>("/api/MyOrders");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }

        public bool IsConnected =>
            hubConnection.State == HubConnectionState.Connected;

        public async ValueTask DisposeAsync()
        {
            await hubConnection.DisposeAsync();
        } }}