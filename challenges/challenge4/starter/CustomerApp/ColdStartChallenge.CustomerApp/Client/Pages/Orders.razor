@page "/orders"

@inject NavigationManager NavigationManager
@inject HttpClient Http

@implements IAsyncDisposable

@using Microsoft.AspNetCore.SignalR.Client
@using AzureStaticWebApps.Blazor.Authentication.Models
@using BlazorApp.Client.Models
@using Microsoft.AspNetCore.Components.Authorization

<AuthorizeView>
    <Authorized>
        @if (orders == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Order Id</th>
                        <th>Delivery Address</th>
                        <th>Driver's Distance</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {
                        <tr>
                            <td>@order.Id</td>
                            <td>@order.FullAddress</td>
                            <td>@order.Distance</td>
                        </tr>
                        <tr>
                            <td colspan="3">
                                <RadzenGoogleMap style="height: 400px" Zoom=@zoom Center=@(new GoogleMapPosition() { Lat = order.LastPosition.Latitude, Lng = order.LastPosition.Longitude })>
                                    <Markers>
                                        @foreach (var order in orders)
                                        {
                                            <RadzenGoogleMapMarker Title="@order.Icecream.Description" Label="@order.Icecream.Name" Position=@(new GoogleMapPosition() { Lat = order.DeliveryPosition.Latitude, Lng = order.DeliveryPosition.Longitude }) />
                                            <RadzenGoogleMapMarker Title="@order.Distance.ToString()" Label="@order.Driver.Name" Position=@(new GoogleMapPosition() { Lat = order.LastPosition.Latitude, Lng = order.LastPosition.Longitude }) />
                                        }
                                    </Markers>
                                </RadzenGoogleMap>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        }
    </Authorized>
    <NotAuthorized>
        <p><em>Log in to view your orders</em></p>
    </NotAuthorized>
</AuthorizeView>





@code {

    int zoom = 10;

    private HubConnection hubConnection;

    private Order[] orders = null;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/api"), options =>
            {
                options.HttpMessageHandlerFactory = innerHandler =>
                    new IncludeRequestCredentialsMessageHandler { InnerHandler = innerHandler };
            })
            .Build();

        hubConnection.On<string, string, string, string>("ReceiveOrderUpdate", (user, orderId, latitude, longitude) =>
        {
            var order = orders.FirstOrDefault(f => f.User == user && f.Id.ToUpperInvariant() == orderId.ToUpperInvariant());

            if (order != null)
            {
                order.LastPosition = new MyPoint(double.Parse(latitude), double.Parse(longitude));
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();

        try
        {
            orders = await Http.GetFromJsonAsync<Order[]>("/api/MyOrders");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
